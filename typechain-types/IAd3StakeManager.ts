/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type IncentiveKeyStruct = {
  rewardToken: string;
  pool: string;
  startTime: BigNumberish;
  endTime: BigNumberish;
};

export type IncentiveKeyStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber
] & {
  rewardToken: string;
  pool: string;
  startTime: BigNumber;
  endTime: BigNumber;
};

export interface IAd3StakeManagerInterface extends utils.Interface {
  functions: {
    "cancelIncentive((address,address,uint256,uint256),address)": FunctionFragment;
    "claimReward((address,address,uint256,uint256),uint256,address,uint256)": FunctionFragment;
    "createIncentive((address,address,uint256,uint256),uint256,int24,int24)": FunctionFragment;
    "depositToken((address,address,uint256,uint256),uint256)": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "getAccruedRewardInfo((address,address,uint256,uint256),uint256)": FunctionFragment;
    "getTokenId(uint256)": FunctionFragment;
    "getTokenIdCount()": FunctionFragment;
    "getUserTokenIdCount(address)": FunctionFragment;
    "incentives(bytes32)": FunctionFragment;
    "nonfungiblePositionManager()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "rewards(address,address)": FunctionFragment;
    "stakes(bytes32,uint256)": FunctionFragment;
    "unstakeToken((address,address,uint256,uint256),uint256,address)": FunctionFragment;
    "updateRange((address,address,uint256,uint256),int24,int24)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelIncentive",
    values: [IncentiveKeyStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [IncentiveKeyStruct, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncentive",
    values: [IncentiveKeyStruct, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [IncentiveKeyStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccruedRewardInfo",
    values: [IncentiveKeyStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIdCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenIdCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "incentives",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeToken",
    values: [IncentiveKeyStruct, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRange",
    values: [IncentiveKeyStruct, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccruedRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIdCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenIdCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "incentives", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRange",
    data: BytesLike
  ): Result;

  events: {
    "IncentiveCanceled(bytes32,uint256)": EventFragment;
    "IncentiveCreated(address,address,uint256,uint256,uint256)": EventFragment;
    "RewardClaimed(address,uint256)": EventFragment;
    "TokenReceived(uint256,address)": EventFragment;
    "TokenStaked(bytes32,uint256,uint128)": EventFragment;
    "TokenUnstaked(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IncentiveCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentiveCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUnstaked"): EventFragment;
}

export type IncentiveCanceledEvent = TypedEvent<
  [string, BigNumber],
  { incentiveId: string; rewardUnclaimed: BigNumber }
>;

export type IncentiveCanceledEventFilter =
  TypedEventFilter<IncentiveCanceledEvent>;

export type IncentiveCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    rewardToken: string;
    pool: string;
    startTime: BigNumber;
    endTime: BigNumber;
    reward: BigNumber;
  }
>;

export type IncentiveCreatedEventFilter =
  TypedEventFilter<IncentiveCreatedEvent>;

export type RewardClaimedEvent = TypedEvent<
  [string, BigNumber],
  { to: string; reward: BigNumber }
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export type TokenReceivedEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; owner: string }
>;

export type TokenReceivedEventFilter = TypedEventFilter<TokenReceivedEvent>;

export type TokenStakedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { incentiveId: string; tokenId: BigNumber; liquidity: BigNumber }
>;

export type TokenStakedEventFilter = TypedEventFilter<TokenStakedEvent>;

export type TokenUnstakedEvent = TypedEvent<
  [string, BigNumber],
  { incentiveId: string; tokenId: BigNumber }
>;

export type TokenUnstakedEventFilter = TypedEventFilter<TokenUnstakedEvent>;

export interface IAd3StakeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAd3StakeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelIncentive(
      key: IncentiveKeyStruct,
      refundee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      to: string,
      amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createIncentive(
      key: IncentiveKeyStruct,
      reward: BigNumberish,
      minTick: BigNumberish,
      maxTick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositToken(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        owner: string;
        numberOfStakes: BigNumber;
        tickLower: number;
        tickUpper: number;
      }
    >;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getAccruedRewardInfo(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getTokenId(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId: BigNumber }>;

    "getTokenId(address,uint256)"(
      to: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId: BigNumber }>;

    getTokenIdCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { index: BigNumber }>;

    getUserTokenIdCount(
      to: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { index: BigNumber }>;

    incentives(
      incentiveId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number] & {
        totalRewardUnclaimed: BigNumber;
        totalSecondsClaimedX128: BigNumber;
        numberOfStakes: BigNumber;
        minTick: number;
        maxTick: number;
      }
    >;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewards(
      rewardToken: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardsOwed: BigNumber }>;

    stakes(
      incentiveId: BytesLike,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        liquidity: BigNumber;
        secondsPerLiquidityInsideInitialX128: BigNumber;
        secondsPerLiquidityInsideAccruedX128: BigNumber;
      }
    >;

    unstakeToken(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRange(
      key: IncentiveKeyStruct,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelIncentive(
    key: IncentiveKeyStruct,
    refundee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    key: IncentiveKeyStruct,
    tokenId: BigNumberish,
    to: string,
    amountRequested: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createIncentive(
    key: IncentiveKeyStruct,
    reward: BigNumberish,
    minTick: BigNumberish,
    maxTick: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositToken(
    key: IncentiveKeyStruct,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number] & {
      owner: string;
      numberOfStakes: BigNumber;
      tickLower: number;
      tickUpper: number;
    }
  >;

  factory(overrides?: CallOverrides): Promise<string>;

  getAccruedRewardInfo(
    key: IncentiveKeyStruct,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "getTokenId(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokenId(address,uint256)"(
    to: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenIdCount(overrides?: CallOverrides): Promise<BigNumber>;

  getUserTokenIdCount(
    to: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  incentives(
    incentiveId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, number] & {
      totalRewardUnclaimed: BigNumber;
      totalSecondsClaimedX128: BigNumber;
      numberOfStakes: BigNumber;
      minTick: number;
      maxTick: number;
    }
  >;

  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewards(
    rewardToken: string,
    recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakes(
    incentiveId: BytesLike,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      liquidity: BigNumber;
      secondsPerLiquidityInsideInitialX128: BigNumber;
      secondsPerLiquidityInsideAccruedX128: BigNumber;
    }
  >;

  unstakeToken(
    key: IncentiveKeyStruct,
    tokenId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRange(
    key: IncentiveKeyStruct,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelIncentive(
      key: IncentiveKeyStruct,
      refundee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      to: string,
      amountRequested: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createIncentive(
      key: IncentiveKeyStruct,
      reward: BigNumberish,
      minTick: BigNumberish,
      maxTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToken(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        owner: string;
        numberOfStakes: BigNumber;
        tickLower: number;
        tickUpper: number;
      }
    >;

    factory(overrides?: CallOverrides): Promise<string>;

    getAccruedRewardInfo(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getTokenId(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenId(address,uint256)"(
      to: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenIdCount(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokenIdCount(
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentives(
      incentiveId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number] & {
        totalRewardUnclaimed: BigNumber;
        totalSecondsClaimedX128: BigNumber;
        numberOfStakes: BigNumber;
        minTick: number;
        maxTick: number;
      }
    >;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    rewards(
      rewardToken: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakes(
      incentiveId: BytesLike,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        liquidity: BigNumber;
        secondsPerLiquidityInsideInitialX128: BigNumber;
        secondsPerLiquidityInsideAccruedX128: BigNumber;
      }
    >;

    unstakeToken(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRange(
      key: IncentiveKeyStruct,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "IncentiveCanceled(bytes32,uint256)"(
      incentiveId?: BytesLike | null,
      rewardUnclaimed?: null
    ): IncentiveCanceledEventFilter;
    IncentiveCanceled(
      incentiveId?: BytesLike | null,
      rewardUnclaimed?: null
    ): IncentiveCanceledEventFilter;

    "IncentiveCreated(address,address,uint256,uint256,uint256)"(
      rewardToken?: string | null,
      pool?: string | null,
      startTime?: null,
      endTime?: null,
      reward?: null
    ): IncentiveCreatedEventFilter;
    IncentiveCreated(
      rewardToken?: string | null,
      pool?: string | null,
      startTime?: null,
      endTime?: null,
      reward?: null
    ): IncentiveCreatedEventFilter;

    "RewardClaimed(address,uint256)"(
      to?: string | null,
      reward?: BigNumberish | null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      to?: string | null,
      reward?: BigNumberish | null
    ): RewardClaimedEventFilter;

    "TokenReceived(uint256,address)"(
      tokenId?: BigNumberish | null,
      owner?: string | null
    ): TokenReceivedEventFilter;
    TokenReceived(
      tokenId?: BigNumberish | null,
      owner?: string | null
    ): TokenReceivedEventFilter;

    "TokenStaked(bytes32,uint256,uint128)"(
      incentiveId?: BytesLike | null,
      tokenId?: BigNumberish | null,
      liquidity?: null
    ): TokenStakedEventFilter;
    TokenStaked(
      incentiveId?: BytesLike | null,
      tokenId?: BigNumberish | null,
      liquidity?: null
    ): TokenStakedEventFilter;

    "TokenUnstaked(bytes32,uint256)"(
      incentiveId?: BytesLike | null,
      tokenId?: BigNumberish | null
    ): TokenUnstakedEventFilter;
    TokenUnstaked(
      incentiveId?: BytesLike | null,
      tokenId?: BigNumberish | null
    ): TokenUnstakedEventFilter;
  };

  estimateGas: {
    cancelIncentive(
      key: IncentiveKeyStruct,
      refundee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      to: string,
      amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createIncentive(
      key: IncentiveKeyStruct,
      reward: BigNumberish,
      minTick: BigNumberish,
      maxTick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositToken(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getAccruedRewardInfo(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenId(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenId(address,uint256)"(
      to: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenIdCount(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokenIdCount(
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentives(
      incentiveId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewards(
      rewardToken: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakes(
      incentiveId: BytesLike,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeToken(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRange(
      key: IncentiveKeyStruct,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelIncentive(
      key: IncentiveKeyStruct,
      refundee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      to: string,
      amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createIncentive(
      key: IncentiveKeyStruct,
      reward: BigNumberish,
      minTick: BigNumberish,
      maxTick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositToken(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccruedRewardInfo(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenId(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenId(address,uint256)"(
      to: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenIdCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserTokenIdCount(
      to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentives(
      incentiveId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonfungiblePositionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewards(
      rewardToken: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakes(
      incentiveId: BytesLike,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstakeToken(
      key: IncentiveKeyStruct,
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRange(
      key: IncentiveKeyStruct,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
