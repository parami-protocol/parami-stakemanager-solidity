/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestIncentiveId,
  TestIncentiveIdInterface,
} from "../TestIncentiveId";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "rewardToken",
            type: "address",
          },
          {
            internalType: "contract IUniswapV3Pool",
            name: "pool",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
        ],
        internalType: "struct IAd3StakeManager.IncentiveKey",
        name: "key",
        type: "tuple",
      },
    ],
    name: "compute",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061018d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a525a55914610030575b600080fd5b61004361003e36600461009a565b610059565b6040516100509190610108565b60405180910390f35b60006100648261006a565b92915050565b60008160405160200161007d9190610111565b604051602081830303815290604052805190602001209050919050565b6000608082840312156100ab578081fd5b6040516080810181811067ffffffffffffffff821117156100c857fe5b60405282356100d68161015b565b815260208301356100e68161015b565b6020820152604083810135908201526060928301359281019290925250919050565b90815260200190565b600060808201905073ffffffffffffffffffffffffffffffffffffffff80845116835280602085015116602084015250604083015160408301526060830151606083015292915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461017d57600080fd5b5056fea164736f6c6343000706000a";

type TestIncentiveIdConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestIncentiveIdConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestIncentiveId__factory extends ContractFactory {
  constructor(...args: TestIncentiveIdConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestIncentiveId> {
    return super.deploy(overrides || {}) as Promise<TestIncentiveId>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestIncentiveId {
    return super.attach(address) as TestIncentiveId;
  }
  connect(signer: Signer): TestIncentiveId__factory {
    return super.connect(signer) as TestIncentiveId__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestIncentiveIdInterface {
    return new utils.Interface(_abi) as TestIncentiveIdInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestIncentiveId {
    return new Contract(address, _abi, signerOrProvider) as TestIncentiveId;
  }
}
